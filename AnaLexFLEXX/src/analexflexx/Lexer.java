/* The following code was generated by JFlex 1.4.3 on 16/06/22 17:10 */

package analexflexx;
import java.io.*;
import static analexflexx.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 16/06/22 17:10 from the specification file
 * <tt>C:/Users/acer/Pictures/Java POO/AnalizadorEMMA/AnaLexFLEXX/src/analexflexx/LEXFLEX</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  5,  0,  6,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     6, 19,  0, 17, 16,  0, 18, 60,  7, 10, 61, 14, 61,  8,  9, 13, 
    12,  3,  3,  3,  3,  3,  3,  3,  3,  3, 58, 61, 21, 11, 20,  0, 
    15, 24, 35, 36, 25, 29, 26, 43, 45, 42,  2, 40, 22, 28, 33, 23, 
    31, 41, 27, 38, 32, 34, 39, 37, 30, 44,  2, 61,  0, 61,  0,  1, 
     0, 47, 46, 48,  2, 53, 54,  2,  2,  2,  2, 49, 55,  2, 57,  2, 
     2,  2, 51, 56, 50, 52,  2,  2,  2,  2,  2, 61, 59, 61, 18,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\2\4\1\1\1\5\1\6"+
    "\1\1\1\5\1\1\1\3\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\1\2\15\17\2\3\1\6\0\1\16"+
    "\1\15\1\0\1\15\2\2\1\17\25\2\4\0\1\20"+
    "\1\21\3\0\1\22\1\0\1\4\1\23\25\2\1\24"+
    "\1\25\1\26\3\0\1\3\2\0\4\2\1\17\1\2"+
    "\1\20\2\0\1\16\1\0\2\2\1\21\2\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\76\0\u0174"+
    "\0\u01b2\0\u01f0\0\u022e\0\76\0\u026c\0\u02aa\0\76\0\76"+
    "\0\76\0\76\0\76\0\76\0\u02e8\0\u026c\0\u0326\0\u0364"+
    "\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554"+
    "\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744"+
    "\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u08b8\0\u08f6\0\u0934"+
    "\0\76\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\272\0\u0a6a\0\u0aa8"+
    "\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98"+
    "\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88"+
    "\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\76"+
    "\0\u083c\0\u1078\0\u10b6\0\u10f4\0\76\0\u1132\0\u0972\0\76"+
    "\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322"+
    "\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512"+
    "\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\76\0\76\0\76"+
    "\0\u1686\0\u16c4\0\u1702\0\76\0\u1740\0\u177e\0\u17bc\0\u17fa"+
    "\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac\0\76"+
    "\0\u19ea\0\u1a28\0\u1a66\0\76\0\u1aa4\0\u1ae2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\4\1\33\1\34\1\35\1\36\3\4\1\37"+
    "\2\4\1\40\1\41\6\4\1\42\1\4\1\43\3\4"+
    "\1\44\3\4\1\45\2\4\1\46\1\47\1\50\1\51"+
    "\1\14\77\0\1\52\13\0\1\53\61\0\3\4\10\0"+
    "\1\4\11\0\44\4\7\0\1\5\5\0\1\54\2\0"+
    "\1\5\66\0\1\7\77\0\1\55\76\0\1\56\105\0"+
    "\1\57\60\0\1\60\10\0\1\60\74\0\1\61\65\0"+
    "\1\5\5\0\1\62\2\0\1\5\74\0\1\61\7\0"+
    "\1\24\65\0\1\63\63\0\3\4\10\0\1\4\11\0"+
    "\1\4\1\64\5\4\1\65\34\4\5\0\3\4\10\0"+
    "\1\4\11\0\4\4\1\66\37\4\5\0\3\4\10\0"+
    "\1\4\11\0\5\4\1\67\36\4\5\0\3\4\10\0"+
    "\1\4\11\0\1\4\1\70\3\4\1\71\36\4\5\0"+
    "\3\4\10\0\1\4\11\0\1\4\1\72\5\4\1\73"+
    "\34\4\5\0\3\4\10\0\1\4\11\0\14\4\1\74"+
    "\27\4\5\0\3\4\10\0\1\4\11\0\10\4\1\75"+
    "\2\4\1\76\30\4\5\0\3\4\10\0\1\4\11\0"+
    "\1\4\1\77\12\4\1\100\27\4\5\0\3\4\10\0"+
    "\1\4\11\0\1\101\4\4\1\102\4\4\1\70\14\4"+
    "\1\103\14\4\5\0\3\4\10\0\1\4\11\0\1\4"+
    "\1\104\3\4\1\105\16\4\1\106\17\4\5\0\3\4"+
    "\10\0\1\4\11\0\7\4\1\107\34\4\5\0\3\4"+
    "\10\0\1\4\11\0\31\4\1\110\12\4\5\0\3\4"+
    "\10\0\1\4\11\0\35\4\1\111\6\4\5\0\3\4"+
    "\10\0\1\4\11\0\31\4\1\112\12\4\5\0\3\4"+
    "\10\0\1\4\11\0\36\4\1\113\5\4\5\0\2\114"+
    "\23\0\44\114\5\0\2\115\23\0\44\115\5\0\2\116"+
    "\23\0\44\116\21\0\1\117\60\0\1\53\1\120\74\53"+
    "\3\0\1\121\10\0\1\121\71\0\1\122\70\0\1\123"+
    "\5\0\1\124\2\0\1\123\71\0\1\125\70\0\1\60"+
    "\7\0\1\126\1\60\64\0\1\127\10\0\1\127\105\0"+
    "\1\130\52\0\3\4\10\0\1\4\11\0\2\4\1\131"+
    "\41\4\5\0\3\4\10\0\1\4\11\0\12\4\1\132"+
    "\31\4\5\0\3\4\10\0\1\4\11\0\23\4\1\133"+
    "\20\4\5\0\3\4\10\0\1\4\11\0\5\4\1\66"+
    "\36\4\5\0\3\4\10\0\1\4\11\0\1\4\1\134"+
    "\42\4\5\0\3\4\10\0\1\4\11\0\1\4\1\135"+
    "\42\4\5\0\3\4\10\0\1\4\11\0\2\4\1\136"+
    "\41\4\5\0\3\4\10\0\1\4\11\0\16\4\1\137"+
    "\25\4\5\0\3\4\10\0\1\4\11\0\11\4\1\140"+
    "\32\4\5\0\3\4\10\0\1\4\11\0\12\4\1\141"+
    "\31\4\5\0\3\4\10\0\1\4\11\0\12\4\1\142"+
    "\31\4\5\0\3\4\10\0\1\4\11\0\6\4\1\143"+
    "\35\4\5\0\3\4\10\0\1\4\11\0\7\4\1\144"+
    "\34\4\5\0\3\4\10\0\1\4\11\0\2\4\1\145"+
    "\41\4\5\0\3\4\10\0\1\4\11\0\7\4\1\146"+
    "\34\4\5\0\3\4\10\0\1\4\11\0\5\4\1\147"+
    "\36\4\5\0\3\4\10\0\1\4\11\0\24\4\1\150"+
    "\17\4\5\0\3\4\10\0\1\4\11\0\12\4\1\151"+
    "\31\4\5\0\3\4\10\0\1\4\11\0\20\4\1\66"+
    "\23\4\5\0\3\4\10\0\1\4\11\0\32\4\1\152"+
    "\11\4\5\0\3\4\10\0\1\4\11\0\36\4\1\153"+
    "\5\4\5\0\3\4\10\0\1\4\11\0\41\4\1\154"+
    "\2\4\5\0\3\4\10\0\1\4\11\0\41\4\1\155"+
    "\2\4\5\0\3\114\10\0\1\114\11\0\44\114\1\156"+
    "\3\0\73\115\1\157\2\115\1\0\2\116\23\0\44\116"+
    "\2\0\1\160\1\0\1\117\1\161\74\117\11\0\1\162"+
    "\67\0\1\123\5\0\1\163\1\164\1\0\1\123\64\0"+
    "\1\165\10\0\1\165\70\0\1\166\67\0\3\4\10\0"+
    "\1\4\11\0\3\4\1\66\40\4\5\0\3\4\10\0"+
    "\1\4\11\0\12\4\1\167\31\4\5\0\3\4\10\0"+
    "\1\4\11\0\14\4\1\170\27\4\5\0\3\4\10\0"+
    "\1\4\11\0\6\4\1\66\35\4\5\0\3\4\10\0"+
    "\1\4\11\0\12\4\1\66\31\4\5\0\3\4\10\0"+
    "\1\4\11\0\3\4\1\171\40\4\5\0\3\4\10\0"+
    "\1\4\11\0\14\4\1\146\27\4\5\0\3\4\10\0"+
    "\1\4\11\0\1\4\1\172\42\4\5\0\3\4\10\0"+
    "\1\4\11\0\7\4\1\66\34\4\5\0\3\4\10\0"+
    "\1\4\11\0\26\4\1\66\15\4\5\0\3\4\10\0"+
    "\1\4\11\0\15\4\1\173\26\4\5\0\3\4\10\0"+
    "\1\4\11\0\21\4\1\167\22\4\5\0\3\4\10\0"+
    "\1\4\11\0\4\4\1\135\37\4\5\0\3\4\10\0"+
    "\1\4\11\0\16\4\1\174\25\4\5\0\3\4\10\0"+
    "\1\4\11\0\3\4\1\107\16\4\1\66\21\4\5\0"+
    "\3\4\10\0\1\4\11\0\12\4\1\171\31\4\5\0"+
    "\3\4\10\0\1\4\11\0\27\4\1\66\14\4\5\0"+
    "\3\4\10\0\1\4\11\0\33\4\1\66\10\4\5\0"+
    "\3\4\10\0\1\4\11\0\37\4\1\66\4\4\5\0"+
    "\3\4\10\0\1\4\11\0\42\4\1\153\1\4\5\0"+
    "\3\4\10\0\1\4\11\0\41\4\1\66\2\4\4\0"+
    "\1\117\1\175\74\117\3\0\1\176\10\0\1\176\64\0"+
    "\1\177\10\0\1\177\64\0\1\165\6\0\1\200\1\0"+
    "\1\165\71\0\1\201\66\0\3\4\10\0\1\4\11\0"+
    "\7\4\1\70\34\4\5\0\3\4\10\0\1\4\11\0"+
    "\24\4\1\66\17\4\5\0\3\4\10\0\1\4\11\0"+
    "\24\4\1\202\17\4\5\0\3\4\10\0\1\4\11\0"+
    "\5\4\1\135\36\4\5\0\3\4\10\0\1\4\11\0"+
    "\3\4\1\203\40\4\5\0\3\4\10\0\1\4\11\0"+
    "\22\4\1\66\21\4\5\0\1\120\77\0\1\176\6\0"+
    "\1\7\1\0\1\176\64\0\1\177\6\0\1\204\1\0"+
    "\1\177\75\0\1\122\62\0\3\4\10\0\1\4\11\0"+
    "\13\4\1\205\30\4\5\0\3\4\10\0\1\4\11\0"+
    "\7\4\1\206\34\4\5\0\3\4\10\0\1\4\11\0"+
    "\25\4\1\66\16\4\5\0\3\4\10\0\1\4\11\0"+
    "\16\4\1\66\25\4\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6944];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\4\1\1\11\2\1\6\11"+
    "\25\1\6\0\1\1\1\11\1\0\31\1\4\0\1\11"+
    "\1\1\3\0\1\11\1\0\1\1\1\11\25\1\3\11"+
    "\3\0\1\11\2\0\7\1\2\0\1\11\1\0\2\1"+
    "\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    InformacionAnalisis c= new InformacionAnalisis();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { c.linea=yyline; lexeme=yytext(); return OperadorDivision;
          }
        case 23: break;
        case 3: 
          { c.linea=yyline; lexeme=yytext(); return LiteralNumeroEntero;
          }
        case 24: break;
        case 11: 
          { c.linea=yyline; lexeme=yytext(); return OperadorResiduo;
          }
        case 25: break;
        case 18: 
          { c.linea=yyline; lexeme=yytext(); return OperadorRaiz;
          }
        case 26: break;
        case 19: 
          { c.linea=yyline; lexeme=yytext(); return OperadorAsignacion;
          }
        case 27: break;
        case 16: 
          { c.linea=yyline; lexeme=yytext(); return Comentario;
          }
        case 28: break;
        case 17: 
          { c.linea=yyline; lexeme=yytext(); return LiteralNumeroReal;
          }
        case 29: break;
        case 1: 
          { c.linea=yyline; lexeme=yytext(); return ERROR;
          }
        case 30: break;
        case 8: 
          { c.linea=yyline; lexeme=yytext(); return OperadorSuma;
          }
        case 31: break;
        case 6: 
          { c.linea=yyline; lexeme=yytext(); return OperadorResta;
          }
        case 32: break;
        case 20: 
          { c.linea=yyline; lexeme=yytext(); return Variable;
          }
        case 33: break;
        case 13: 
          { c.linea=yyline; lexeme=yytext(); return OperadorRelacion;
          }
        case 34: break;
        case 9: 
          { c.linea=yyline; lexeme=yytext(); return OperadorMultiplicacion;
          }
        case 35: break;
        case 14: 
          { c.linea=yyline; lexeme=yytext(); return LiteralNumeroReal0;
          }
        case 36: break;
        case 22: 
          { c.linea=yyline; lexeme=yytext(); return LiteralCaracter;
          }
        case 37: break;
        case 10: 
          { c.linea=yyline; lexeme=yytext(); return OperadorPotencia;
          }
        case 38: break;
        case 15: 
          { c.linea=yyline; lexeme=yytext(); return Reservadas;
          }
        case 39: break;
        case 21: 
          { c.linea=yyline; lexeme=yytext(); return LiteralCadena;
          }
        case 40: break;
        case 12: 
          { c.linea=yyline; lexeme=yytext(); return OperadorLogico;
          }
        case 41: break;
        case 2: 
          { c.linea=yyline; lexeme=yytext(); return Identificador;
          }
        case 42: break;
        case 4: 
          { /* ignore */
          }
        case 43: break;
        case 5: 
          { c.linea=yyline; lexeme=yytext(); return Delimitador;
          }
        case 44: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

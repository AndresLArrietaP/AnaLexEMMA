/* The following code was generated by JFlex 1.4.3 on 14/06/22 01:38 */

package analexflexx;
import static analexflexx.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14/06/22 01:38 from the specification file
 * <tt>C:/Users/acer/Pictures/Java POO/AnalizadorEMMA/AnaLexFLEXX/src/analexflexx/LEXFLEX</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\55\2\0\1\3\22\0\1\70\1\64\1\0\1\62"+
    "\1\61\1\0\1\63\1\0\1\71\1\72\1\0\1\56\1\3\1\57"+
    "\1\76\1\53\12\2\1\54\1\0\1\67\1\65\1\66\1\0\1\60"+
    "\1\6\1\21\1\22\1\7\1\13\1\10\1\31\1\33\1\30\1\1"+
    "\1\26\1\4\1\12\1\17\1\5\1\15\1\27\1\11\1\24\1\16"+
    "\1\20\1\25\1\23\1\14\1\32\1\1\4\0\1\52\1\0\1\35"+
    "\1\34\1\36\1\1\1\43\1\44\1\1\1\50\1\51\1\1\1\37"+
    "\1\45\5\1\1\41\1\46\1\40\1\42\1\1\1\47\3\1\1\0"+
    "\1\73\1\0\1\63\u1f99\0\1\74\1\75\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\17\2\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\2\1\1\14"+
    "\1\4\3\1\1\2\1\3\1\0\2\2\1\15\25\2"+
    "\5\4\7\0\2\2\1\3\1\0\1\16\26\2\3\4"+
    "\1\17\5\0\1\20\1\21\1\22\1\3\1\0\4\2"+
    "\1\15\1\0\1\2\1\22\1\4\1\23\3\0\1\3"+
    "\1\0\1\3\1\0\2\2\1\24\1\4\1\25\1\2"+
    "\2\0\1\26\1\0\2\2\1\24\1\23\1\0\1\16"+
    "\1\3\1\27\1\3\1\30\1\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1"+
    "\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\77\0\77\0\u052b"+
    "\0\77\0\77\0\77\0\77\0\u056a\0\u05a9\0\77\0\u05e8"+
    "\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0"+
    "\0\176\0\u081f\0\u085e\0\u089d\0\u08dc\0\u091b\0\u095a\0\u0999"+
    "\0\u09d8\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91"+
    "\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89"+
    "\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81"+
    "\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u0762\0\u113a"+
    "\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u1332"+
    "\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a"+
    "\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722"+
    "\0\77\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d\0\77\0\77"+
    "\0\u103e\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16"+
    "\0\u1a55\0\u1a94\0\u0d4a\0\u1ad3\0\u1722\0\u1b12\0\u1b51\0\u1b90"+
    "\0\77\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49"+
    "\0\77\0\77\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u1e84\0\u1ec3"+
    "\0\77\0\u1d49\0\u1f02\0\77\0\u1f41\0\77\0\u1f80\0\77"+
    "\0\u1fbf";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\3"+
    "\1\11\1\12\1\13\1\14\3\3\1\15\2\3\1\16"+
    "\1\17\6\3\1\20\1\3\1\21\3\3\1\22\3\3"+
    "\1\23\2\3\1\24\2\3\1\25\1\26\1\2\1\5"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\2\37\1\40\1\41\1\2\1\42\1\43\2\2\100\0"+
    "\1\3\1\44\1\0\47\3\26\0\1\45\73\0\1\46"+
    "\3\0\1\5\51\0\1\5\12\0\1\5\7\0\1\3"+
    "\1\44\1\0\1\3\1\47\5\3\1\50\37\3\25\0"+
    "\1\3\1\44\1\0\4\3\1\51\42\3\25\0\1\3"+
    "\1\44\1\0\5\3\1\52\41\3\25\0\1\3\1\44"+
    "\1\0\1\3\1\53\3\3\1\54\41\3\25\0\1\3"+
    "\1\44\1\0\1\3\1\55\5\3\1\56\37\3\25\0"+
    "\1\3\1\44\1\0\14\3\1\57\32\3\25\0\1\3"+
    "\1\44\1\0\10\3\1\60\2\3\1\61\33\3\25\0"+
    "\1\3\1\44\1\0\1\3\1\62\12\3\1\63\32\3"+
    "\25\0\1\3\1\44\1\0\1\64\4\3\1\65\4\3"+
    "\1\53\14\3\1\66\17\3\25\0\1\3\1\44\1\0"+
    "\1\3\1\67\3\3\1\70\16\3\1\71\22\3\25\0"+
    "\1\3\1\44\1\0\7\3\1\72\37\3\25\0\1\3"+
    "\1\44\1\0\31\3\1\73\15\3\25\0\1\3\1\44"+
    "\1\0\35\3\1\74\11\3\25\0\1\3\1\44\1\0"+
    "\31\3\1\75\15\3\25\0\1\3\1\44\1\0\44\3"+
    "\1\76\2\3\24\0\1\77\1\100\1\101\1\77\46\100"+
    "\1\102\1\103\1\77\1\0\21\77\61\0\1\104\101\0"+
    "\1\34\1\37\76\0\1\37\14\0\1\5\51\0\1\5"+
    "\10\0\1\105\1\106\1\5\11\0\1\107\51\0\1\107"+
    "\1\0\1\110\10\0\1\107\7\0\1\111\2\0\47\111"+
    "\25\0\1\112\2\0\47\112\25\0\1\113\1\114\1\0"+
    "\47\113\26\0\1\115\7\0\1\116\63\0\1\46\2\0"+
    "\1\117\75\0\1\3\1\44\1\0\2\3\1\120\44\3"+
    "\25\0\1\3\1\44\1\0\12\3\1\121\34\3\25\0"+
    "\1\3\1\44\1\0\23\3\1\122\23\3\25\0\1\3"+
    "\1\44\1\0\5\3\1\51\41\3\25\0\1\3\1\44"+
    "\1\0\1\3\1\123\45\3\25\0\1\3\1\44\1\0"+
    "\1\3\1\124\45\3\25\0\1\3\1\44\1\0\2\3"+
    "\1\125\44\3\25\0\1\3\1\44\1\0\16\3\1\126"+
    "\30\3\25\0\1\3\1\44\1\0\11\3\1\127\35\3"+
    "\25\0\1\3\1\44\1\0\12\3\1\130\34\3\25\0"+
    "\1\3\1\44\1\0\12\3\1\131\34\3\25\0\1\3"+
    "\1\44\1\0\6\3\1\132\40\3\25\0\1\3\1\44"+
    "\1\0\7\3\1\133\37\3\25\0\1\3\1\44\1\0"+
    "\2\3\1\134\4\3\1\135\37\3\25\0\1\3\1\44"+
    "\1\0\7\3\1\136\37\3\25\0\1\3\1\44\1\0"+
    "\5\3\1\137\41\3\25\0\1\3\1\44\1\0\24\3"+
    "\1\140\22\3\25\0\1\3\1\44\1\0\12\3\1\141"+
    "\34\3\25\0\1\3\1\44\1\0\20\3\1\51\26\3"+
    "\25\0\1\3\1\44\1\0\32\3\1\142\14\3\25\0"+
    "\1\3\1\44\1\0\36\3\1\143\10\3\25\0\1\3"+
    "\1\44\1\0\41\3\1\144\5\3\25\0\1\3\1\44"+
    "\1\0\45\3\1\145\1\3\24\0\55\77\1\0\22\77"+
    "\1\100\1\101\1\77\47\100\2\77\1\0\23\77\1\146"+
    "\52\77\1\0\22\77\1\100\1\101\1\77\47\100\1\147"+
    "\1\77\1\0\22\77\1\150\2\77\47\150\2\77\1\0"+
    "\21\77\57\0\1\151\104\0\1\152\76\0\1\153\12\0"+
    "\1\154\1\0\1\107\47\154\2\0\1\107\12\0\1\107"+
    "\2\0\1\155\5\0\1\156\75\0\2\111\1\0\47\111"+
    "\20\0\1\157\100\0\1\160\2\0\2\113\1\0\47\113"+
    "\25\0\1\113\1\161\1\0\47\113\26\0\1\162\73\0"+
    "\1\46\2\0\1\163\75\0\1\3\1\44\1\0\3\3"+
    "\1\51\43\3\25\0\1\3\1\44\1\0\12\3\1\164"+
    "\34\3\25\0\1\3\1\44\1\0\14\3\1\165\32\3"+
    "\25\0\1\3\1\44\1\0\6\3\1\51\40\3\25\0"+
    "\1\3\1\44\1\0\12\3\1\51\34\3\25\0\1\3"+
    "\1\44\1\0\3\3\1\166\43\3\25\0\1\3\1\44"+
    "\1\0\14\3\1\136\32\3\25\0\1\3\1\44\1\0"+
    "\1\3\1\167\45\3\25\0\1\3\1\44\1\0\7\3"+
    "\1\51\37\3\25\0\1\3\1\44\1\0\26\3\1\51"+
    "\20\3\25\0\1\3\1\44\1\0\15\3\1\170\31\3"+
    "\25\0\1\3\1\44\1\0\21\3\1\164\25\3\25\0"+
    "\1\3\1\44\1\0\4\3\1\124\42\3\25\0\1\3"+
    "\1\44\1\0\47\3\1\0\1\171\23\0\1\3\1\44"+
    "\1\0\16\3\1\172\30\3\25\0\1\3\1\44\1\0"+
    "\3\3\1\72\16\3\1\51\24\3\25\0\1\3\1\44"+
    "\1\0\12\3\1\166\34\3\25\0\1\3\1\44\1\0"+
    "\27\3\1\51\17\3\25\0\1\3\1\44\1\0\33\3"+
    "\1\51\13\3\25\0\1\3\1\44\1\0\37\3\1\51"+
    "\7\3\25\0\1\3\1\44\1\0\42\3\1\143\4\3"+
    "\25\0\1\3\1\44\1\0\41\3\1\143\5\3\24\0"+
    "\2\77\1\173\52\77\1\0\22\77\1\174\2\77\47\174"+
    "\2\77\1\0\22\77\2\150\1\77\46\150\1\175\2\77"+
    "\1\0\21\77\70\0\1\37\74\0\1\176\1\0\1\37"+
    "\7\0\2\154\1\177\47\154\2\0\1\177\12\0\1\177"+
    "\7\0\1\200\2\0\47\200\26\0\1\156\67\0\1\201"+
    "\3\0\1\202\2\0\1\203\73\0\1\46\2\0\1\204"+
    "\75\0\1\3\1\44\1\0\7\3\1\53\37\3\25\0"+
    "\1\3\1\44\1\0\24\3\1\51\22\3\25\0\1\3"+
    "\1\44\1\0\24\3\1\205\22\3\25\0\1\3\1\44"+
    "\1\0\5\3\1\124\41\3\25\0\1\3\1\44\1\0"+
    "\3\3\1\206\43\3\26\0\1\207\75\0\1\3\1\44"+
    "\1\0\22\3\1\51\24\3\24\0\1\77\2\174\1\77"+
    "\46\174\1\210\2\77\1\0\21\77\70\0\1\211\11\0"+
    "\1\177\51\0\1\177\12\0\1\177\1\0\1\212\5\0"+
    "\2\200\1\0\47\200\20\0\1\213\5\0\1\214\76\0"+
    "\1\215\73\0\1\46\2\0\1\216\75\0\1\3\1\44"+
    "\1\0\13\3\1\217\33\3\25\0\1\3\1\44\1\0"+
    "\7\3\1\220\37\3\26\0\1\221\74\0\1\77\2\174"+
    "\1\77\46\174\1\222\2\77\1\0\21\77\3\0\1\223"+
    "\51\0\1\223\12\0\1\223\10\0\1\214\67\0\1\224"+
    "\6\0\1\225\73\0\1\46\2\0\1\226\75\0\1\3"+
    "\1\44\1\0\25\3\1\51\21\3\25\0\1\3\1\44"+
    "\1\0\16\3\1\51\30\3\27\0\1\223\51\0\1\223"+
    "\12\0\1\223\1\0\1\157\6\0\1\227\73\0\1\46"+
    "\1\0\1\230\1\231\1\0\47\230\23\0\1\46\2\0"+
    "\1\231\73\0\1\46";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8190];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\23\1\2\11\1\1\4\11\2\1\1\11"+
    "\6\1\1\0\35\1\7\0\3\1\1\0\32\1\1\11"+
    "\5\0\2\11\2\1\1\0\5\1\1\0\4\1\3\0"+
    "\1\11\1\0\1\1\1\0\4\1\2\11\2\0\1\1"+
    "\1\0\2\1\1\11\1\1\1\0\1\11\1\1\1\11"+
    "\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 23: 
          { lexeme=yytext(); return Matricula1;
          }
        case 25: break;
        case 16: 
          { lexeme=yytext(); return LiteralCadena;
          }
        case 26: break;
        case 24: 
          { lexeme=yytext(); return DNI;
          }
        case 27: break;
        case 18: 
          { lexeme=yytext(); return Matricula2;
          }
        case 28: break;
        case 15: 
          { return OperadorRaiz;
          }
        case 29: break;
        case 7: 
          { return OperadorResta;
          }
        case 30: break;
        case 9: 
          { return OperadorPotencia;
          }
        case 31: break;
        case 21: 
          { return OperadorAsignacion;
          }
        case 32: break;
        case 17: 
          { lexeme=yytext(); return LiteralCaracter;
          }
        case 33: break;
        case 19: 
          { lexeme=yytext(); return Comentario;
          }
        case 34: break;
        case 10: 
          { return OperadorResiduo;
          }
        case 35: break;
        case 3: 
          { lexeme=yytext(); return LiteralNumeroEntero;
          }
        case 36: break;
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 37: break;
        case 20: 
          { lexeme=yytext(); return Credito;
          }
        case 38: break;
        case 6: 
          { return OperadorSuma;
          }
        case 39: break;
        case 1: 
          { return ERROR;
          }
        case 40: break;
        case 8: 
          { return OperadorMultiplicacion;
          }
        case 41: break;
        case 22: 
          { lexeme=yytext(); return Matricula3;
          }
        case 42: break;
        case 4: 
          { /*Ignore*/
          }
        case 43: break;
        case 12: 
          { return OperadorRelacion;
          }
        case 44: break;
        case 11: 
          { return OperadorLogico;
          }
        case 45: break;
        case 5: 
          { return OperadorDivision;
          }
        case 46: break;
        case 13: 
          { lexeme=yytext(); return Reservadas;
          }
        case 47: break;
        case 14: 
          { lexeme=yytext(); return LiteralNumeroReal;
          }
        case 48: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
